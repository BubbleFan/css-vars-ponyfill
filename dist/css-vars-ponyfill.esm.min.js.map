{"version":3,"file":"css-vars-ponyfill.esm.min.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.3.1\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        urlQueue[urlIndex] = responseText;\n        settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = parser.href;\n        var isCrossDomain = parser.host !== location.host;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && typeof XDomainRequest !== \"undefined\") {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     include: 'style,link[rel=\"stylesheet\"]', // default\n *     exclude: '[href=\"skip.css\"]',\n *     filter : /red/,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray) {\n *       // ...\n *     },\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, document.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    var returnVal = settings.onSuccess(resolvedCssText, node, sourceUrl);\n                    cssArray[cssIndex] = returnVal === false ? \"\" : returnVal || resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        var responseImportData = parseImportData(importText, importData.absoluteUrls[i], __errorRules);\n                        responseImportData.rules.forEach(function(rule, i) {\n                            importText = importText.replace(rule, responseImportData.absoluteRules[i]);\n                        });\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                handleSuccess(node.textContent, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string} css The CSS stringt to be converted to an AST\n * @returns {object}\n */\nfunction cssParse(css) {\n    const errors = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') { return; }\n\n        let i = 2;\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) { i++; }\n\n        // FIXED\n        if (!css[i]) { return error('end of comment is missing'); }\n\n        const str = css.slice(2, i);\n        css = css.slice(i + 2);\n\n        return { type: 'comment', comment: str };\n    }\n    function comments() {\n        const cmnts = [];\n\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n        return cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m)\n        { return m[0]\n            .trim() // remove all comments from selectors\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                return m.replace(/,/g, '\\u200C');\n            })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function(s) {\n                return s.replace(/\\u200C/g, ',');\n            }); }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) { return; }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) { return error('property missing \\':\\''); }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n\n        const ret = { type: 'declaration', property: prop.replace(comment_regexp, ''), value: val ? val[0].replace(comment_regexp, '').trim() : '' };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n    function declarations() {\n        if (!open()) { return error('missing \\'{\\''); }\n\n        let d,\n            decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) { return error('missing \\'}\\''); }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) { return { type: 'keyframe', values: vals, declarations: declarations() }; }\n    }\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) { return; }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) { return error('@keyframes missing name'); } // identifier\n\n        const name = m[1];\n\n        if (!open()) { return error('@keyframes missing \\'{\\''); }\n\n        let frame,\n            frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) { return error('@keyframes missing \\'}\\''); }\n\n        return { type: 'keyframes', name: name, vendor: vendor, keyframes: frames };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        // FIXED\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === '@') { return at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x(); }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        const sel = selector() || [];\n        if (!sel.length) { error('selector missing'); }\n\n        const decls = declarations();\n\n        return { type: 'rule', selectors: sel, declarations: decls };\n    }\n    function rules(core) {\n        if (!core && !open()) { return error('missing \\'{\\''); }\n\n        let node,\n            rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            rules.push(node);\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) { return error('missing \\'}\\''); }\n\n        return rules;\n    }\n\n    return { type: 'stylesheet', stylesheet: { rules: rules(true), errors: errors } };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            return '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst persistStore        = {};\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : true,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const map       = {};\n    const settings  = mergeDeep(defaults, options);\n    const varSource = settings.persist ? persistStore : settings.variables;\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText);\n\n    // Remove non-vars\n    if (settings.onlyVars) {\n        cssTree.stylesheet.rules = filterVars(cssTree.stylesheet.rules);\n    }\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Handle variables defined in settings.variables\n    Object.keys(settings.variables).forEach(key => {\n        // Convert all property names to leading '--' style\n        const prop  = `--${key.replace(/^-+/, '')}`;\n        const value = settings.variables[key];\n\n        // Update settings.variables\n        if (key !== prop) {\n            settings.variables[prop] = value;\n            delete settings.variables[key];\n        }\n\n        // Store variables so they can be reapplied on subsequent call. For\n        // example, if '--myvar' is set on the first call it should continue to\n        // be set on each call thereafter (otherwise each call removes the\n        // previously set variables).\n        if (settings.persist) {\n            persistStore[prop] = value;\n        }\n    });\n\n    if (Object.keys(varSource).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(varSource).forEach(function(key) {\n            // Update internal map value with varSource value\n            map[key] = varSource[key];\n\n            // Add new declaration to newRule\n            newRule.declarations.push({\n                type    : 'declaration',\n                property: key,\n                value   : varSource[key]\n            });\n\n            // Add to persistent storage\n            if (settings.persist) {\n                persistStore[key] = varSource[key];\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== 'undefined') {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Filters rules recursively, retaining only declarations that contain either a\n * CSS variable definition (property) or function (value). Maintains all\n * declarations for @font-face and @keyframes rules that contain a CSS\n * definition or function.\n *\n * @param {array} rules\n * @returns {array}\n */\nfunction filterVars(rules) {\n    return rules.filter(rule => {\n        // Rule, @font-face, @host, @page\n        if (rule.declarations) {\n            const declArray = rule.declarations.filter(d => {\n                const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                return hasVarProp || hasVarVal;\n            });\n\n            // For most rule types the filtered declarations should be applied.\n            // @font-face declaratons are unique and require all declarations to\n            // be retained if any declaration contains a CSS variable definition\n            // or value.\n            if (rule.type !== 'font-face') {\n                rule.declarations = declArray;\n            }\n\n            return Boolean(declArray.length);\n        }\n        // @keyframes\n        else if (rule.keyframes) {\n            // @keyframe rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            return Boolean(rule.keyframes.filter(k =>\n                Boolean(k.declarations.filter(d => {\n                    const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                    const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                    return hasVarProp || hasVarVal;\n                }).length)\n            ).length);\n        }\n        // @document, @media, @supports\n        else if (rule.rules) {\n            rule.rules = filterVars(rule.rules).filter(r => r.declarations && r.declarations.length);\n\n            return Boolean(rule.rules.length);\n        }\n\n        return true;\n    });\n}\n\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolve CSS variables in a value\n *\n * The second argument to a CSS variable function, if provided, is a fallback\n * value, which is used as the substitution value when the referenced variable\n * is invalid.\n *\n * var(name[, fallback])\n *\n * @param {string} value A property value containing a CSS variable function\n * @param {object} map A map of variable names and values\n * @param {object} settings Settings object passed from transformVars()\n * @return {string} A new value with CSS variables substituted or using fallback\n */\nfunction resolveValue(value, map, settings) {\n    // matches `name[, fallback]`, captures 'name' and 'fallback'\n    const RE_VAR = /([\\w-]+)(?:\\s*,\\s*)?(.*)?/;\n    const balancedParens = balanced('(', ')', value);\n    const varStartIndex  = value.indexOf('var(');\n    const varRef         = balanced('(', ')', value.substring(varStartIndex)).body;\n    const warningIntro   = 'CSS transform warning:';\n\n    /* istanbul ignore next */\n    if (!balancedParens) {\n        settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n    }\n\n    /* istanbul ignore next */\n    if (varRef === '') {\n        settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n    }\n\n    const varFunc = VAR_FUNC_IDENTIFIER + '(' + varRef + ')';\n\n    const varResult = varRef.replace(RE_VAR, function(_, name, fallback) {\n        const replacement = map[name];\n\n        if (!replacement && !fallback) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (!replacement && fallback) {\n            return fallback;\n        }\n\n        return replacement;\n    });\n\n    // resolve the variable\n    value = value.split(varFunc).join(varResult);\n\n    // recursively resolve any remaining variables in the value\n    if (value.indexOf(VAR_FUNC_IDENTIFIER + '(') !== -1) {\n        value = resolveValue(value, map, settings);\n    }\n\n    return value;\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\n","// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport mergeDeep           from './merge-deep';\nimport transformCss        from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    // Sources\n    include      : 'style,link[rel = stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, transformCss\n    preserve     : false, // transformCss\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    variables    : {},    // transformCss\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\n// Regex: CSS variable :root declarations and var() function values\nconst reCssVars = /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, and 2) a\n *                   reference to the appended <style> node.\n *\n * @example\n *\n *   cssVars({\n *     include      : 'style,link[rel=\"stylesheet\"]', // default\n *     exclude      : '',\n *     fixNestedCalc: true,  // default\n *     onlyLegacy   : true,  // default\n *     onlyVars     : false, // default\n *     preserve     : false, // default\n *     silent       : false, // default\n *     updateDOM    : true,  // default\n *     variables    : {\n *       // ...\n *     },\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings = mergeDeep(defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const hasNativeSupport = window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\n        // Lacks native support or onlyLegacy 'false'\n        if (!hasNativeSupport || !settings.onlyLegacy) {\n            const styleNodeId = pkgName;\n\n            getCssData({\n                include: settings.include,\n                // Always exclude styleNodeId element, which is the generated\n                // <style> node containing previously transformed CSS.\n                exclude: `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : ''),\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter : settings.onlyVars ? reCssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    // Store the onSuccess return value, which allows modifying\n                    // cssText before adding it to the cssArray.\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    // Set cssText to return value (if provided)\n                    cssText = returnVal === false ? '' : returnVal || cssText;\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const errorMsg = `CSS XHR error: \"${xhr.responseURL}\" ${xhr.status}` + (xhr.statusText ? ` (${xhr.statusText})` : '');\n\n                    handleError(errorMsg, node, xhr, url);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    let styleNode = null;\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = document.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode);\n                }\n            });\n        }\n        // Has native support\n        else if (hasNativeSupport && settings.updateDOM) {\n            // Set variables using native methods\n            Object.keys(settings.variables).forEach(key => {\n                // Convert all property names to leading '--' style\n                const prop  = `--${key.replace(/^-+/, '')}`;\n                const value = settings.variables[key];\n\n                document.documentElement.style.setProperty(prop, value);\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","xhr","urlIndex","responseText","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","include","exclude","filter","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","baseUrl","callbackFn","__errorData","__errorRules","importData","parseImportData","rules","absoluteUrls","push","responseArray","importText","responseImportData","rule","replace","absoluteRules","resolvedCssText","errorData","data","test","returnVal","ignoreRules","match","getFullUrl","oldUrl","newUrl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","pVal","key","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","error","msg","Error","re","exec","whitespace","close","comment","type","comments","cmnts","c","trim","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_rule","vendor","name","frame","frames","keyframes","at_keyframes","supports","at_supports","at_host","media","at_media","at_custom_m","selectors","at_page","at_document","at_fontface","at_x","core","sel","stylesheet","errors","stringifyCss","tree","delim","cb","renderMethods","visit","nodes","buf","n","txt","walkCss","fn","persistStore","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformVars","varSource","persist","variables","cssTree","parseCss","onlyVars","filterVars","varNameIndices","decl","preserve","splice","newRule","resolvedValue","resolveValue","fixNestedCalc","declArray","hasVarProp","hasVarVal","Boolean","k","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","balancedParens","varStartIndex","varRef","substring","warningIntro","onWarning","varFunc","varResult","_","fallback","replacement","defaults","reCssVars","cssVars","handleError","message","sourceNode","silent","handleWarning","warn","hasNativeSupport","window","CSS","onlyLegacy","updateDOM","documentElement","style","setProperty","styleNodeId","pkgName","responseURL","statusText","nodeArray","styleNode","transformCss","lastNode","querySelector","nextSibling","parentNode","insertBefore","errorThrown","errorNode","addEventListener","init","evt","removeEventListener"],"mappings":"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"}