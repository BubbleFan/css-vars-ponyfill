{"version":3,"file":"css-vars-ponyfill.esm.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.3.1\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        urlQueue[urlIndex] = responseText;\n        settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = parser.href;\n        var isCrossDomain = parser.host !== location.host;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && typeof XDomainRequest !== \"undefined\") {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     include: 'style,link[rel=\"stylesheet\"]', // default\n *     exclude: '[href=\"skip.css\"]',\n *     filter : /red/,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray) {\n *       // ...\n *     },\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, document.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    var returnVal = settings.onSuccess(resolvedCssText, node, sourceUrl);\n                    cssArray[cssIndex] = returnVal === false ? \"\" : returnVal || resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        var responseImportData = parseImportData(importText, importData.absoluteUrls[i], __errorRules);\n                        responseImportData.rules.forEach(function(rule, i) {\n                            importText = importText.replace(rule, responseImportData.absoluteRules[i]);\n                        });\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                handleSuccess(node.textContent, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string} css The CSS stringt to be converted to an AST\n * @returns {object}\n */\nfunction cssParse(css) {\n    const errors = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') { return; }\n\n        let i = 2;\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) { i++; }\n\n        // FIXED\n        if (!css[i]) { return error('end of comment is missing'); }\n\n        const str = css.slice(2, i);\n        css = css.slice(i + 2);\n\n        return { type: 'comment', comment: str };\n    }\n    function comments() {\n        const cmnts = [];\n\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n        return cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m)\n        { return m[0]\n            .trim() // remove all comments from selectors\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                return m.replace(/,/g, '\\u200C');\n            })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function(s) {\n                return s.replace(/\\u200C/g, ',');\n            }); }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) { return; }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) { return error('property missing \\':\\''); }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n\n        const ret = { type: 'declaration', property: prop.replace(comment_regexp, ''), value: val ? val[0].replace(comment_regexp, '').trim() : '' };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n    function declarations() {\n        if (!open()) { return error('missing \\'{\\''); }\n\n        let d,\n            decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) { return error('missing \\'}\\''); }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) { return { type: 'keyframe', values: vals, declarations: declarations() }; }\n    }\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) { return; }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) { return error('@keyframes missing name'); } // identifier\n\n        const name = m[1];\n\n        if (!open()) { return error('@keyframes missing \\'{\\''); }\n\n        let frame,\n            frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) { return error('@keyframes missing \\'}\\''); }\n\n        return { type: 'keyframes', name: name, vendor: vendor, keyframes: frames };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        // FIXED\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === '@') { return at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x(); }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        const sel = selector() || [];\n        if (!sel.length) { error('selector missing'); }\n\n        const decls = declarations();\n\n        return { type: 'rule', selectors: sel, declarations: decls };\n    }\n    function rules(core) {\n        if (!core && !open()) { return error('missing \\'{\\''); }\n\n        let node,\n            rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            rules.push(node);\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) { return error('missing \\'}\\''); }\n\n        return rules;\n    }\n\n    return { type: 'stylesheet', stylesheet: { rules: rules(true), errors: errors } };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            return '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst persistStore        = {};\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : true,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const map       = {};\n    const settings  = mergeDeep(defaults, options);\n    const varSource = settings.persist ? persistStore : settings.variables;\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText);\n\n    // Remove non-vars\n    if (settings.onlyVars) {\n        cssTree.stylesheet.rules = filterVars(cssTree.stylesheet.rules);\n    }\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Handle variables defined in settings.variables\n    Object.keys(settings.variables).forEach(key => {\n        // Convert all property names to leading '--' style\n        const prop  = `--${key.replace(/^-+/, '')}`;\n        const value = settings.variables[key];\n\n        // Update settings.variables\n        if (key !== prop) {\n            settings.variables[prop] = value;\n            delete settings.variables[key];\n        }\n\n        // Store variables so they can be reapplied on subsequent call. For\n        // example, if '--myvar' is set on the first call it should continue to\n        // be set on each call thereafter (otherwise each call removes the\n        // previously set variables).\n        if (settings.persist) {\n            persistStore[prop] = value;\n        }\n    });\n\n    if (Object.keys(varSource).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(varSource).forEach(function(key) {\n            // Update internal map value with varSource value\n            map[key] = varSource[key];\n\n            // Add new declaration to newRule\n            newRule.declarations.push({\n                type    : 'declaration',\n                property: key,\n                value   : varSource[key]\n            });\n\n            // Add to persistent storage\n            if (settings.persist) {\n                persistStore[key] = varSource[key];\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== 'undefined') {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Filters rules recursively, retaining only declarations that contain either a\n * CSS variable definition (property) or function (value). Maintains all\n * declarations for @font-face and @keyframes rules that contain a CSS\n * definition or function.\n *\n * @param {array} rules\n * @returns {array}\n */\nfunction filterVars(rules) {\n    return rules.filter(rule => {\n        // Rule, @font-face, @host, @page\n        if (rule.declarations) {\n            const declArray = rule.declarations.filter(d => {\n                const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                return hasVarProp || hasVarVal;\n            });\n\n            // For most rule types the filtered declarations should be applied.\n            // @font-face declaratons are unique and require all declarations to\n            // be retained if any declaration contains a CSS variable definition\n            // or value.\n            if (rule.type !== 'font-face') {\n                rule.declarations = declArray;\n            }\n\n            return Boolean(declArray.length);\n        }\n        // @keyframes\n        else if (rule.keyframes) {\n            // @keyframe rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            return Boolean(rule.keyframes.filter(k =>\n                Boolean(k.declarations.filter(d => {\n                    const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                    const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                    return hasVarProp || hasVarVal;\n                }).length)\n            ).length);\n        }\n        // @document, @media, @supports\n        else if (rule.rules) {\n            rule.rules = filterVars(rule.rules).filter(r => r.declarations && r.declarations.length);\n\n            return Boolean(rule.rules.length);\n        }\n\n        return true;\n    });\n}\n\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolve CSS variables in a value\n *\n * The second argument to a CSS variable function, if provided, is a fallback\n * value, which is used as the substitution value when the referenced variable\n * is invalid.\n *\n * var(name[, fallback])\n *\n * @param {string} value A property value containing a CSS variable function\n * @param {object} map A map of variable names and values\n * @param {object} settings Settings object passed from transformVars()\n * @return {string} A new value with CSS variables substituted or using fallback\n */\nfunction resolveValue(value, map, settings) {\n    // matches `name[, fallback]`, captures 'name' and 'fallback'\n    const RE_VAR = /([\\w-]+)(?:\\s*,\\s*)?(.*)?/;\n    const balancedParens = balanced('(', ')', value);\n    const varStartIndex  = value.indexOf('var(');\n    const varRef         = balanced('(', ')', value.substring(varStartIndex)).body;\n    const warningIntro   = 'CSS transform warning:';\n\n    /* istanbul ignore next */\n    if (!balancedParens) {\n        settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n    }\n\n    /* istanbul ignore next */\n    if (varRef === '') {\n        settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n    }\n\n    const varFunc = VAR_FUNC_IDENTIFIER + '(' + varRef + ')';\n\n    const varResult = varRef.replace(RE_VAR, function(_, name, fallback) {\n        const replacement = map[name];\n\n        if (!replacement && !fallback) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (!replacement && fallback) {\n            return fallback;\n        }\n\n        return replacement;\n    });\n\n    // resolve the variable\n    value = value.split(varFunc).join(varResult);\n\n    // recursively resolve any remaining variables in the value\n    if (value.indexOf(VAR_FUNC_IDENTIFIER + '(') !== -1) {\n        value = resolveValue(value, map, settings);\n    }\n\n    return value;\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\n","// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport mergeDeep           from './merge-deep';\nimport transformCss        from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    // Sources\n    include      : 'style,link[rel = stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, transformCss\n    preserve     : false, // transformCss\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    variables    : {},    // transformCss\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\n// Regex: CSS variable :root declarations and var() function values\nconst reCssVars = /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, and 2) a\n *                   reference to the appended <style> node.\n *\n * @example\n *\n *   cssVars({\n *     include      : 'style,link[rel=\"stylesheet\"]', // default\n *     exclude      : '',\n *     fixNestedCalc: true,  // default\n *     onlyLegacy   : true,  // default\n *     onlyVars     : false, // default\n *     preserve     : false, // default\n *     silent       : false, // default\n *     updateDOM    : true,  // default\n *     variables    : {\n *       // ...\n *     },\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings = mergeDeep(defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const hasNativeSupport = window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\n        // Lacks native support or onlyLegacy 'false'\n        if (!hasNativeSupport || !settings.onlyLegacy) {\n            const styleNodeId = pkgName;\n\n            getCssData({\n                include: settings.include,\n                // Always exclude styleNodeId element, which is the generated\n                // <style> node containing previously transformed CSS.\n                exclude: `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : ''),\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter : settings.onlyVars ? reCssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    // Store the onSuccess return value, which allows modifying\n                    // cssText before adding it to the cssArray.\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    // Set cssText to return value (if provided)\n                    cssText = returnVal === false ? '' : returnVal || cssText;\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const errorMsg = `CSS XHR error: \"${xhr.responseURL}\" ${xhr.status}` + (xhr.statusText ? ` (${xhr.statusText})` : '');\n\n                    handleError(errorMsg, node, xhr, url);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    let styleNode = null;\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = document.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode);\n                }\n            });\n        }\n        // Has native support\n        else if (hasNativeSupport && settings.updateDOM) {\n            // Set variables using native methods\n            Object.keys(settings.variables).forEach(key => {\n                // Convert all property names to leading '--' style\n                const prop  = `--${key.replace(/^-+/, '')}`;\n                const value = settings.variables[key];\n\n                document.documentElement.style.setProperty(prop, value);\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","xhr","urlIndex","responseText","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","include","exclude","filter","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","resolvedCssText","errorData","data","test","returnVal","parseImportData","baseUrl","ignoreRules","importData","rules","replace","match","rule","absoluteUrls","getFullUrl","absoluteRules","oldUrl","newUrl","callbackFn","__errorData","__errorRules","push","responseArray","importText","responseImportData","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","pVal","key","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","errors","error","msg","Error","re","exec","whitespace","close","comment","type","comments","cmnts","c","trim","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_fontface","at_supports","supports","at_host","at_media","media","at_custom_m","at_document","at_x","at_rule","core","stylesheet","stringifyCss","tree","delim","cb","renderMethods","visit","nodes","buf","n","txt","walkCss","fn","persistStore","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformVars","defaults","varSource","persist","variables","cssTree","parseCss","onlyVars","filterVars","varNameIndices","decl","preserve","splice","newRule","resolvedValue","resolveValue","fixNestedCalc","declArray","hasVarProp","hasVarVal","Boolean","k","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","RE_VAR","balancedParens","varStartIndex","varRef","substring","warningIntro","onWarning","varFunc","varResult","_","fallback","replacement","reCssVars","cssVars","handleError","message","sourceNode","silent","handleWarning","warn","hasNativeSupport","window","CSS","onlyLegacy","styleNodeId","pkgName","errorMsg","responseURL","statusText","nodeArray","styleNode","transformCss","updateDOM","lastNode","querySelector","nextSibling","parentNode","insertBefore","errorThrown","errorNode","documentElement","style","setProperty","addEventListener","init","evt","removeEventListener"],"mappings":"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"}